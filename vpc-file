#vpc
resource "aws_vpc" "vpc_demo" {
cidr_block= var.cidr
instance_tenancy     = var.instance_tenancy
enable_dns_hostnames = var.enable_dns_hostnames
enable_dns_support   = var.enable_dns_support
tags = {
Name = var.tags["Name"]
}
}

#ig
resource "aws_internet_gateway" "gw" {
vpc_id = aws_vpc.vpc_demo.id
tags = {
Name = "internet-gateway-mine"
}
}


#public-subnet-2
resource "aws_subnet" "public_2" {
vpc_id= aws_vpc.vpc_demo.id
map_public_ip_on_launch = true
cidr_block = "10.0.0.0/26"
availability_zone = "ap-south-1a"
tags = {
Name = "public_2-demo"
}
}

#public-subnet-1
resource "aws_subnet" "public_1" {
vpc_id= aws_vpc.vpc_demo.id
map_public_ip_on_launch = true
cidr_block= "10.0.0.64/26"
availability_zone ="ap-south-1b"
tags = {
Name = "public_1-demo"
}
}

#private-subnet-1
resource "aws_subnet" "private_1" {
vpc_id= aws_vpc.vpc_demo.id
cidr_block= "10.0.0.128/26"
availability_zone ="ap-south-1a"
tags = {
Name = "private_1-demo"
}
}

#private-subnet-2
resource "aws_subnet" "private_2" {
vpc_id= aws_vpc.vpc_demo.id
cidr_block= "10.0.0.192/26"
availability_zone ="ap-south-1b"
tags = {
Name = "private_2-demo"
}
}

#route table
resource "aws_route_table" "route-public" {
vpc_id = aws_vpc.vpc_demo.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.gw.id
}
tags = {
Name = "public-route-table-demo"
}
}


#route table
resource "aws_route_table" "route-private" {
vpc_id = aws_vpc.vpc_demo.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_nat_gateway.nat.id
}
tags = {
Name = "private-route-table-demo"
}
}

#subnet association
resource "aws_route_table_association" "public_1" {
subnet_id= aws_subnet.public_1.id
route_table_id = aws_route_table.route-public.id
}

resource "aws_route_table_association" "public_2" {
subnet_id= aws_subnet.public_2.id
route_table_id = aws_route_table.route-public.id
}

resource "aws_route_table_association" "private_1" {
subnet_id= aws_subnet.private_1.id
route_table_id = aws_route_table.route-private.id
}

resource "aws_route_table_association" "private_2" {
subnet_id= aws_subnet.private_2.id
route_table_id = aws_route_table.route-private.id
}



resource "aws_eip" "nat_eip" {
domain =  "vpc"
}



# NAT Gateway (in public subnet 1)
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_1.id

  tags = {
    Name = "MyNATGateway"
  }
}



# NACL

 resource "aws_network_acl" "public_1_demo_nacl" {
  vpc_id = aws_vpc.vpc_demo.id
  tags = {
    Name = "demo-nacl_public"
  }
}


resource "aws_network_acl" "private_1_demo_nacl" {
  vpc_id = aws_vpc.vpc_demo.id
  tags = {
    Name = "demo-nacl_private"
  }
}






# Associate NACL with a Subnet
resource "aws_network_acl_association" "public_nac_1l" {
  subnet_id      = aws_subnet.public_1.id
  network_acl_id = aws_network_acl.public_1_demo_nacl.id
}



resource "aws_network_acl_association" "public_nacl_2" {
  subnet_id      = aws_subnet.public_2.id
  network_acl_id = aws_network_acl.public_1_demo_nacl.id
}


resource "aws_network_acl_association" "private_nacl_1" {
  subnet_id      = aws_subnet.private_1.id
  network_acl_id = aws_network_acl.private_1_demo_nacl.id
}


resource "aws_network_acl_association" "private_nacl_2" {
  subnet_id      = aws_subnet.private_2.id
  network_acl_id = aws_network_acl.private_1_demo_nacl.id
}









# Outbound Rule: Allow All Traffic
resource "aws_network_acl_rule" "outbound_all" {
  network_acl_id = aws_network_acl.public_1_demo_nacl.id
  rule_number    = 100
  egress         = true
  protocol       = "-1" # -1 means all protocols
  rule_action    = "allow"
  cidr_block     = "0.0.0.0/0"
  from_port      = 0
  to_port        = 0
}

# inbound Rule: Allow All Traffic
resource "aws_network_acl_rule" "inbound_all" {
  network_acl_id = aws_network_acl.public_1_demo_nacl.id
  rule_number    = 100
  egress         = true
  protocol       = "-1" # -1 means all protocols
  rule_action    = "allow"
  cidr_block     = "0.0.0.0/0"
  from_port      = 0
  to_port        = 0
}

# Inbound Rule: Allow HTTP (port 80)
resource "aws_network_acl_rule" "private_inbound_http" {
  network_acl_id = aws_network_acl.private_1_demo_nacl.id
  rule_number    = 100
  egress         = false
  protocol       = "tcp"
  rule_action    = "allow"
  cidr_block     = "0.0.0.0/0"
  from_port      = 80
  to_port        = 80
}
